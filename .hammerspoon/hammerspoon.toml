hs.hotkey.bind({ "alt", "cmd" }, "S", function()
    local win = hs.window.focusedWindow()
    if not win then return end
    
    local f = win:frame()
    local screen = win:screen()
    local max = screen:frame()
    
    -- Define padding (in pixels)
    local padding = 40
    
    -- Set frame with padding on all sides
    f.x = max.x + padding
    f.y = max.y + padding
    f.w = max.w - (padding * 2)
    f.h = max.h - (padding * 2)
    
    win:setFrame(f)
end)
-- Window management: center window
-- hs.hotkey.bind({ "cmd"}, "C", function()
--     local win = hs.window.focusedWindow()
--     if not win then return end
--     win:centerOnScreen()
-- end)

-- Auto-reload config when files change
function reloadConfig(files)
    doReload = false
    for _, file in pairs(files) do
        if file:sub(-4) == ".lua" then
            doReload = true
        end
    end
    if doReload then
        hs.reload()
    end
end
-- -- Switch desktops using Ctrl + Option + H/L (using AppleScript approach) hs.hotkey.bind({ "ctrl", "alt" }, "H", function()
--     hs.alert.show("Switching to previous desktop")
--     hs.osascript.applescript([[
--         tell application "System Events"
--             key code 123 using {control down} -- Left arrow with control
--         end tell
--     ]])
-- end)

-- hs.hotkey.bind({ "ctrl", "alt" }, "L", function()
--     hs.alert.show("Switching to next desktop")
--     hs.osascript.applescript([[
--         tell application "System Events" 
--             key code 124 using {control down} -- Right arrow with control
--         end tell
--     ]])
-- end)
-- Switch desktops using Ctrl + Option + H/L
-- hs.hotkey.bind({ "ctrl", "alt" }, "H", function()
--     -- Get all spaces and screens
--     local allSpaces = hs.spaces.allSpaces()
--     local focusedSpace = hs.spaces.focusedSpace()
--     local mainScreen = hs.screen.mainScreen()
--     local screenUUID = mainScreen:getUUID()
    
--     -- Get spaces for the current screen
--     local screenSpaces = allSpaces[screenUUID]
    
--     -- Find current space index
--     local currentIdx = 0
--     for idx, spaceID in ipairs(screenSpaces) do
--         if spaceID == focusedSpace then
--             currentIdx = idx
--             break
--         end
--     end
    
--     -- Calculate previous space index (with wraparound)
--     local prevIdx = currentIdx - 1
--     if prevIdx < 1 then prevIdx = #screenSpaces end
    
--     -- Go to the previous space
--     local prevSpaceID = screenSpaces[prevIdx]
--     hs.alert.show("Switching to previous desktop")
--     hs.spaces.gotoSpace(prevSpaceID)
-- end)

-- hs.hotkey.bind({ "ctrl", "alt" }, "L", function()
--     -- Get all spaces and screens
--     local allSpaces = hs.spaces.allSpaces()
--     local focusedSpace = hs.spaces.focusedSpace()
--     local mainScreen = hs.screen.mainScreen()
--     local screenUUID = mainScreen:getUUID()
    
--     -- Get spaces for the current screen
--     local screenSpaces = allSpaces[screenUUID]
    
--     -- Find current space index
--     local currentIdx = 0
--     for idx, spaceID in ipairs(screenSpaces) do
--         if spaceID == focusedSpace then
--             currentIdx = idx
--             break
--         end
--     end
    
--     -- Calculate next space index (with wraparound)
--     local nextIdx = currentIdx + 1
--     if nextIdx > #screenSpaces then nextIdx = 1 end
    
--     -- Go to the next space
--     local nextSpaceID = screenSpaces[nextIdx]
--     hs.alert.show("Switching to next desktop")
--     hs.spaces.gotoSpace(nextSpaceID)
-- end)

-- Move focused window to previous/next space with Ctrl + Alt + Shift + H/L
hs.hotkey.bind({ "ctrl", "alt", "shift" }, "H", function()
    local win = hs.window.focusedWindow()
    if not win then
        hs.alert.show("No focused window")
        return
    end
    
    -- Get all spaces and screens
    local allSpaces = hs.spaces.allSpaces()
    local focusedSpace = hs.spaces.focusedSpace()
    local mainScreen = hs.screen.mainScreen()
    local screenUUID = mainScreen:getUUID()
    
    -- Get spaces for the current screen
    local screenSpaces = allSpaces[screenUUID]
    
    -- Find current space index
    local currentIdx = 0
    for idx, spaceID in ipairs(screenSpaces) do
        if spaceID == focusedSpace then
            currentIdx = idx
            break
        end
    end
    
    -- Calculate previous space index (with wraparound)
    local prevIdx = currentIdx - 1
    if prevIdx < 1 then prevIdx = #screenSpaces end
    
    -- Move window to the previous space
    local prevSpaceID = screenSpaces[prevIdx]
    hs.alert.show("Moving window to previous desktop")
    
    -- Move the window and follow it
    local result = hs.spaces.moveWindowToSpace(win, prevSpaceID)
    if result then
        hs.timer.doAfter(0.2, function()
            hs.spaces.gotoSpace(prevSpaceID)
            hs.timer.doAfter(0.2, function()
                win:focus()
            end)
        end)
    else
        hs.alert.show("Failed to move window")
    end
end)

hs.hotkey.bind({ "ctrl", "alt", "shift" }, "L", function()
    local win = hs.window.focusedWindow()
    if not win then
        hs.alert.show("No focused window")
        return
    end
    
    -- Get all spaces and screens
    local allSpaces = hs.spaces.allSpaces()
    local focusedSpace = hs.spaces.focusedSpace()
    local mainScreen = hs.screen.mainScreen()
    local screenUUID = mainScreen:getUUID()
    
    -- Get spaces for the current screen
    local screenSpaces = allSpaces[screenUUID]
    
    -- Find current space index
    local currentIdx = 0
    for idx, spaceID in ipairs(screenSpaces) do
        if spaceID == focusedSpace then
            currentIdx = idx
            break
        end
    end
    
    -- Calculate next space index (with wraparound)
    local nextIdx = currentIdx + 1
    if nextIdx > #screenSpaces then nextIdx = 1 end
    
    -- Move window to the next space
    local nextSpaceID = screenSpaces[nextIdx]
    hs.alert.show("Moving window to next desktop")
    
    -- Move the window and follow it
    local result = hs.spaces.moveWindowToSpace(win, nextSpaceID)
    if result then
        hs.timer.doAfter(0.2, function()
            hs.spaces.gotoSpace(nextSpaceID)
            hs.timer.doAfter(0.2, function()
                win:focus()
            end)
        end)
    else
        hs.alert.show("Failed to move window")
    end
end)

hs.pathwatcher.new(os.getenv("HOME") .. "/.hammerspoon/", reloadConfig):start()
hs.alert.show("Config loaded")
